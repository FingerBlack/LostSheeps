//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Object/BoxMove.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BoxMove : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BoxMove()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BoxMove"",
    ""maps"": [
        {
            ""name"": ""Box"",
            ""id"": ""5caa926d-1e69-4fb2-98f3-fc410991b768"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e59dd2bc-56f5-4c57-acc9-79afe3a18514"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5931ee02-eb5b-4efb-80e1-1cfbaaff3a3c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6610ae6f-5888-4b3f-901e-ab137a309fe0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7948d917-c0ba-4191-8618-1d368dd0124d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bd0a1559-52d8-4f23-bfb8-c4fd4ca2e593"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ffce168c-796a-4c44-b444-d4d394c90faf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7c0fe1cb-b08b-46e1-ae15-7068eb7218b4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Box
        m_Box = asset.FindActionMap("Box", throwIfNotFound: true);
        m_Box_Move = m_Box.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Box
    private readonly InputActionMap m_Box;
    private IBoxActions m_BoxActionsCallbackInterface;
    private readonly InputAction m_Box_Move;
    public struct BoxActions
    {
        private @BoxMove m_Wrapper;
        public BoxActions(@BoxMove wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Box_Move;
        public InputActionMap Get() { return m_Wrapper.m_Box; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoxActions set) { return set.Get(); }
        public void SetCallbacks(IBoxActions instance)
        {
            if (m_Wrapper.m_BoxActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BoxActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BoxActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BoxActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_BoxActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public BoxActions @Box => new BoxActions(this);
    public interface IBoxActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
